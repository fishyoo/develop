【全局】
ZQ			强制退出
ZZ			存盘退出
ctrl+z		挂起Vim
:sh			启动sh ，从sh中再次返回可用ctrl+d
:!Command 	执行命令command
:help		帮助
:help x		显示x命令的帮助说明


【文件】
vi +n FileName 	打开文件定位到第n行
:w			保存
:w!			若文件属性为『只读』时，强制写入该档案。
:w [filename]	将编辑的数据储存成另一个档案（类似另存新档）
Ctrl+g			显示行、列信息，会显示如下：
				"log/spp_worker1.log" 17368 行 --0%--            51,1    0%
:r [filename]			在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面				
:n1,n2 w [filename]		将 n1 到 n2 的内容储存成 filename 这个档案。

vi test1 test2 test3	可以同时打开多个文件
:buffers				查看当前Buffer中的文件列表
:buffer 1				切换
:buffer test1


				
【修改】
x		删除光标下字符
3x		删除3个字符
X		删除光标前一个字符

u		撤消
.		重复，意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)
ctrl+r	重做

i		在光标之前开始输入文本
I		在行开头输入
a		在光标之后开始输入文本
A		在行尾开始输入文本(Append)
o		在下面插入一行
O		在上面插入一行

cc或S 	删行并输入。
C 		删除光标以后的部分并输入。
cw 		删除光标所在单词并输入。

v 		进入可视模式(选择内容)
V 		选择一行
^V 		按下^V后即可进行矩形的选择了
yy		复制1行
2yy		复制2行
yw		把光标所在的单词放入缓冲区
y1G		复制游标所在行到第一行的所有数据
yG		复制游标所在行到最后一行的所有数据
y0		复制光标所在的那个字符到该行行首的所有数据
y$		复制光标所在的那个字符到该行行尾的所有数据

p		在下另起一行粘贴
P		在上另起一行粘贴

dd		剪切1行 
10d		剪切10行
D 		剪切光标后面的内容
dw		剪切光标所在的单词
d$ 		剪切至当前行尾
d0		剪切至该行的最前面一个字符
db 		删除到某个单词的开始位置
dW 		删除到某个以空格作为分隔符的单词的结尾位置
dB 		删除到某个以空格作为分隔符的单词的开始位置
d7B 	删除到前面7个以空格作为分隔符的单词的开始位置
d) 	删除到某个语句的结尾位置
d4( 	删除到第四个语句的结尾位置
d( 	删除到某个语句的开始位置
d} 		删除到某个段落的结尾位置
d{ 		删除到某个段落的开始位置
dG		删除文件当前之后的所有内容
ggdG	删除文件所有内容

:9,.d 	（删除第9行到当前行）删除说明：这是在vi中 ，“.”当前行 ，“1,.”表示从第一行到当前行 ，“d”删除


rc		把光符所在字符替换成c
R		从光标处向后改写
J		将光标所在行与下一行的数据结合成同一行


【光标移动】
gg		文件首行
G		文件末尾
5gg		第5行
n<Enter>	n 为数字。光标向下移动 n 行
ctrl+o 	跳转回之前的位置
ctrl+i 	返回跳转之前的位置

w, W	光标移到下一个单词前 	(W 向前移动一个单词，不把符号或标点当作单词处理)
b, B	光标移到上一个单词前 	(B 向后移动一个单词，不把符号或标点当作单词处理)
e, E	光标移到下一个单词后  (E 忽略标点，即一个短句）
2w 		光标向前移动两个单词
3e 		光标向前移动到第 3 个单词的末尾
<space>		光标移动到下一个字符处
n<space>	光标移动到n个字符处
2| 			光标移到第2列上

+或Enter 	光标移至下一行第一个非空白字符
-			光标移至上一行第一个非空白字符
n+       光标下移n行
n-       光标上移n行 

0 /Home		光标移至行首
^ 			光标移至行首第一个非空字符
$ /End		光标移至行尾

H		光标移到屏顶
L		光标移到屏底
M		光标移到屏中

zz 		让光标所在的行居屏幕中央
zt 		让光标所在的行居屏幕最上一行 t=top
zb 		让光标所在的行居屏幕最下一行 b=bottom
z-		把当前行作为屏幕的最后一行，并重新显示
z.		把当前行作为屏幕的中间一行，并重新显示

ctrl+f	上翻页  
ctrl+b	下翻页  
Ctrl+u	上翻半屏
Ctrl+d	下翻半屏

Ctrl+e	光标不动，屏幕向下滚一行
Ctrl+y	光标不动，屏幕项上滚一行

%		移到匹配的”（）”或”{}”上

(        光标移至句首
)        光标移至句尾
{        光标移至段落开头
}        光标移至段落结尾


【查找】
fx 		光标移到本行下一个'x'字符处
Fx 		光标移到本行上一个'x'字符处
tx       和fx相同，区别是跳到字符x前
Tx       和Fx相同，区别是跳到字符x后

/\CWord			区分大小写 查找Word
/pattern/+number 	将光标停在包含pattern的行后面第number行上。
/pattern/-number 	将光标停在包含pattern的行前面第number行上。
/pattern/z- 		寻找pattern的下一个位置，并把所在行设为屏幕的最后一行。

<<		把当前行左缩进。
>>		把当前行右缩进。

/		向后循环搜索
?		向前循环搜索
n		搜索下一个
N		搜索前一个
dfc 		删除从文本中出现字符“c”的位置，一直向前直到下一个该字符所出现的位置（包括该字符）之间的内容
dtc 		删除当前行直到下一个字符“c”所出现位置之间的内容


【替换】
:s/old/new 		替换该行第一个匹配串
:s/old/new/g 	替换全行的匹配串
:%s/old/new/g 	替换整个文件的匹配串
:1,$s/word1/word2/gc	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！
:n1,n2s/word1/word2/g	n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：
『:100,200s/vbird/VBIRD/g』。
%s/tag:0,str4,len:[0-9]*,"//g	替换tag:0,str4,len:[0-9]*," 为空

【set 系列命令】		
:set all		列出所有选项以及设置情况		
:set nu			设置显示行号
:set nonu		设置无行号
:set ic 		忽略大小写
:set noic 		取消忽略大小写
:set hls 		匹配项高亮显示
:set is 		显示部分匹配


【其他】
qcharacter  开始录制宏，character为a到z的任意字符
q           终止录制宏
@character  调用先前录制的宏


【正则】
回车：在vim的输入方法是ctrl+V,会得到^,此时再按回车.会得到^M这个就是回车了，因此把全文件所有str换成str回车的语句是:
: %s/str/str^M/g
^M 其实就是 \r ，也就是说这个文件所使用的回车是 mac 中的。也就是 apple公司生产的操作系统内默认的换行符。
在 windows中默认是 \r\n
在 unix/linux 中默认是 \n
只需要在vi/vim 中输入命令
:%s/\r//g或者
:%s/[ctrl-v][ctrl-m]//g

%s/;\%x00/;\r\n/g   #\%x00 ： ^@


